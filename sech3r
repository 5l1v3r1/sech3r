#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
from builtins import input
from datetime import datetime
import requests
from string import digits
from os import system, name
from sys import argv, exit


def info(text):
    if not len(text.split(': ')) == 2:
        return '[\033[1m\033[36m*\033[0m] \033[94m'+str(text)+'\033[0m'
    else:
        text = text.split(': ')
        return '[\033[1m\033[36m*\033[0m] \033[94m'+str(text[0])+': '+'\033[0m\033[36m\033[3m'+str(text[1])+'\033[0m'


def bad(text):
    if not len(text.split(': ')) == 2:
        return '[\033[1m\033[91m-\033[0m] \033[31m'+str(text)+'\033[0m'
    else:
        text = text.split(': ')
        return '[\033[1m\033[91m*\033[0m] \033[31m'+str(text[0])+': '+'\033[0m\033[91m\033[3m'+str(text[1])+'\033[0m'


def warning(text):
    if not len(text.split(': ')) == 2:
        return'[\033[1m\033[93m!\033[0m] \033[33m'+str(text)+'\033[0m'
    else:
        text = text.split(': ')
        return '[\033[1m\033[93m*\033[0m] \033[33m'+str(text[0])+': '+'\033[0m\033[93m\033[3m'+str(text[1])+'\033[0m'


def good(text):
    if not len(text.split(': ')) == 2:
        return '[\033[1m\033[92m+\033[0m] \033[32m'+str(text)+'\033[0m'
    else:
        text = text.split(': ')
        return '[\033[1m\033[92m*\033[0m] \033[32m'+str(text[0])+': '+'\033[0m\033[92m\033[3m'+str(text[1])+'\033[0m'


def cls():
    print('\033[H\033[J', end='')


def banner():
    logo = '   _____      ________   _____\n  / ___/___  / ____/ /_ |__  /_____\n  \\__ \\/ _ \\/ /   / __ \\ /_ </ ___/\n  __/ /  __/ /___/ / / /__/ / /\n/____/\\___/\\____/_/ /_/____/_/\n'
    if is_win():
        system('title SeCh3r')
    else:
        print('\33]0;SeCh3r\a', end='')
    print('\033[0m\033[1m' + logo + '\033[0m')


def is_win():
    if name != 'posix':
        return True
    else:
        return False


def cool_input(txt):
    try:
        _input = input('[\033[1m\033[35m<\033[0m] \033[35m{}:\033[0m \033[3m'.format(txt))
        print('\033[0m', end='')
        return _input
    except KeyboardInterrupt:
        print('\b\bNull\033[0m')
        print(bad('Terminating via Keyboard Interruption.'))
        coolExit(1)
    except EOFError:
        print('Null\033[0m')
        print(bad('Bye! Bye!!'))
        coolExit(1)


def fetch_time():
    global dd, mm, yyyy, HH, MM, SS
    now = datetime.now()
    dd = str(now.day)
    mm = str(now.month)
    yyyy = str(now.year)
    HH = str(now.hour)
    MM = str(now.minute)
    SS = str(now.second)


def coolExit(exitCode):
    fetch_time()
    print(info('Halted [at] {}'.format(dd+'.'+mm+'.'+yyyy+'│'+HH+':'+MM+':'+SS)))
    exit(exitCode)


def check_schema(url):
    if 'https://' in url or 'http://' in url:
        return True
    else:
        return False


def is_valid(url):
    try:
        if requests.head(url).status_code != 404:
            return True
        else:
            return False
    except requests.exceptions.ConnectionError:
        print(bad('Oops! Some Errors were Encountered...'))
        exit(1)


def parse_headers(url, printHeaders=False):
    request_headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36'}
    response = requests.get(url, headers=request_headers)
    if printHeaders is True:
        print('\033[1m\033[4mREQUEST HEADERS\033[0m')
        for header in response.request.headers:
            print('\033[37m\033[1m{}\033[0m\033[95m\033[1m: \033[0m\033[37m{}\033[0m'.format(header, response.request.headers[header]))
        print('\033[1m\033[4mRESPONSE HEADERS\033[0m')
        for header in response.headers:
            print('\033[37m\033[1m{}\033[0m\033[95m\033[1m: \033[0m\033[37m{}\033[0m'.format(header, response.headers[header]))
    return response


def check_version_disclosure(headers):
    version_disclosure_headers = ['Server', 'X-AspNet-Version']
    for header in version_disclosure_headers:
        if header in headers:
            for digit in digits:
                if digit in headers[header]:
                    print(bad('Version Disclosure Present: {}'.format(headers[header])))
                    break
                else:
                    continue
    if 'X-Powered-By' in headers:
        print(bad('Version Disclosure Present: {}'.format(headers['X-Powered-By'])))


def check_security_headers(headers):
    security_headers = ['Referrer-Policy', 'X-XSS-Protection', 'Content-Security-Policy', 'X-Frame-Options', 'Strict-Transport-Security', 'X-Content-Type-Options']
    for security_header in security_headers:
        if security_header in headers:
            if security_header == 'Referrer-Policy':
                if headers['Referrer-Policy'] in 'strict-origin-when-cross-origin':
                    continue
                else:
                    print(bad('Referrer-Policy Present. But: {}'.format(headers['Referrer-Policy'])))
            elif security_header == 'X-XSS-Protection':
                if headers['X-XSS-Protection'] == '0' or '1; mode=block' in headers['X-XSS-Protection']:
                    continue
                else:
                    print(bad('X-XSS-Protection Present. But: {}'.format(headers['X-Xss-Protection'])))
            elif security_header == 'X-Frame-Options':
                if 'SAMEORIGIN' in headers['X-Frame-Options'] or 'DENY' in headers['X-Frame-Options']:
                    continue
                else:
                    print(bad('X-Frame-Options Present. But: {}'.format(headers['X-Frame-Options'])))
            elif security_header == 'X-Content-Type-Options':
                if headers['X-Content-Type-Options'] in 'nosniff':
                    continue
                else:
                    print(bad('X-Content-Type-Options Present. But: {}'.format(headers['X-Content-Type-Options'])))
            elif security_header == 'Strict-Transport-Security':
                if 'max-age' in headers['Strict-Transport-Security']:
                    continue
                else:
                    print(bad('Strict-Transport-Security. But: {}'.format(headers['Strict-Transport-Security'])))
            else:
                pass
        elif security_header not in headers:
            print(warning('{} is 404!'.format(security_header)))
        else:
            continue


def main():
    fetch_time()
    if is_win():
        system('echo.')
    cls()
    banner()
    print(info('Started [at] {}'.format(dd+'.'+mm+'.'+yyyy+'│'+HH+':'+MM+':'+SS)))

    if len(argv) == 2:
        url = argv[1]
    else:
        url = cool_input('URL')

    if check_schema(url) is False:
        url = 'http://' + url

    if is_valid(url):
        if len(argv) == 2:
            print('[\033[1m\033[95m<\033[0m] \033[95mURL:\033[0m\033[3m {}\033[0m'.format(argv[1]))
        print(good('Valid URL!'))
        response = parse_headers(url)
        print(info('Active URL: {}'.format(response.url)))
        check_version_disclosure(response.headers)
        check_security_headers(response.headers)
        fetch_time()
        coolExit(0)


if __name__ == '__main__':
    main()
